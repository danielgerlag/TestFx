@model TestFx.Evaluation.Results.IRunResult
@using TestFx.Evaluation.Results
@using TestFx.Extensibility.Providers

@{
  var suiteResults = Model.SuiteResults.SelectMany(x => x.SuiteResults).ToList ();

  var passed = suiteResults.Count (x => x.State == State.Passed);
  var failed = suiteResults.Count (x => x.State == State.Failed);
  var inconclusive = suiteResults.Count (x => x.State == State.Inconclusive);
  var ignored = suiteResults.Count (x => x.State == State.Ignored);

  var panelId = 0;
}

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>SpecK Report @(DateTime.Now)</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">

  <!--link rel="stylesheet/less" href="less/bootstrap.less" type="text/css" /-->
  <!--link rel="stylesheet/less" href="less/responsive.less" type="text/css" /-->
  <!--script src="js/less-1.3.3.min.js"></script-->
  <!--append ‘#!watch’ to the browser URL, then refresh the page. -->

  <link href="css/bootstrap.min.css" rel="stylesheet">
  <link href="css/style.css" rel="stylesheet">

  <!-- HTML5 shim, for IE6-8 support of HTML5 elements -->
  <!--[if lt IE 9]>
    <script src="js/html5shiv.js"> </script>
  <![endif]-->
  <!-- Fav and touch icons -->
  <link rel="apple-touch-icon-precomposed" sizes="144x144" href="img/apple-touch-icon-144-precomposed.png">
  <link rel="apple-touch-icon-precomposed" sizes="114x114" href="img/apple-touch-icon-114-precomposed.png">
  <link rel="apple-touch-icon-precomposed" sizes="72x72" href="img/apple-touch-icon-72-precomposed.png">
  <link rel="apple-touch-icon-precomposed" href="img/apple-touch-icon-57-precomposed.png">
  <link rel="shortcut icon" href="img/favicon.png">

  <script type="text/javascript" src="js/jquery.min.js"> </script>
  <script type="text/javascript" src="js/bootstrap.min.js"> </script>
  <script type="text/javascript" src="js/scripts.js"> </script>

</head>

<body>
  <div class="container">
    <div class="col-md-12 column">
      <nav class="navbar navbar-default navbar-inverse" role="navigation">

        <div class="navbar-header">
          <a href="#" class="navbar-brand">Suites</a>
        </div>

        <form class="navbar-form form-inline">
          <div class="btn-group pull-right" style="width: 600px;">
            <button class="btn btn-default" type="button" style="width: 25%;">
              <em class="glyphicon glyphicon-ok"></em>
              Passed
              <span class="badge">@passed</span>
            </button>
            <button class="btn btn-default" type="button" style="width: 25%;">
              <em class="glyphicon glyphicon-remove"></em>
              Failed
              <span class="badge">@failed</span>
            </button>
            <button class="btn btn-default" type="button" style="width: 25%;">
              <em class="glyphicon glyphicon-flag"></em>
              Inconclusive
              <span class="badge">@inconclusive</span>
            </button>
            <button class="btn btn-default" type="button" style="width: 25%;">
              <em class="glyphicon glyphicon-eye-close"></em>
              Ignored
              <span class="badge">@ignored</span>
            </button>
          </div>
        </form>
      </nav>

      <div class="col-md-12 column">
        <div class="panel-group" id="panel-group-1">

          @foreach (var suiteResult in suiteResults)
          {
            panelId = panelId + 1;

            <div class="panel panel-default">

              <div class="panel-heading">
                <a class="panel-title" data-toggle="collapse" data-parent="#panel-group-1" href="#panel-element-@panelId">
                  @suiteResult.Text
                  <span class="badge pull-right">@suiteResult.TestResults.Count()</span>
                </a>
              </div>

              <div id="panel-element-@panelId" class="panel-collapse in">
                <div class="panel-body">

                  @foreach (var testResult in suiteResult.TestResults)
                  {
                    <h3>@testResult.Text</h3>
                    <span>Given:</span>
                    <ul>
                      @foreach (var arrangement in testResult.OperationResults.Where (x => x.Type == OperationType.Action))
                      {
                        <li>@arrangement.Text</li>
                      }
                    </ul>
                    <table class="table table-striped">
                      <thead>
                        <tr>
                          <th width="5%;">#</th>
                          <th width="40%;">Assertion</th>
                          <th width="55%;">Exception</th>
                        </tr>
                      </thead>
                      <tbody>
                        @{ var number = 0; }
                        @foreach (var assertion in testResult.OperationResults.Where (x => x.Type != OperationType.Action))
                        {
                          var state = assertion.State.ToString ()
                              .Replace (State.Passed.ToString (), "success")
                              .Replace (State.Failed.ToString (), "danger")
                              .Replace (State.Ignored.ToString (), "warning")
                              .Replace (State.Inconclusive.ToString (), "active");
                          number = number + 1;
                          <tr class="@state">
                            <td>@number</td>
                            <td>@assertion.Text</td>
                            <td>
                              @if (assertion.Exception != null)
                              {
                                @assertion.Exception.Name<br />
                                @assertion.Exception.Message
                              }
                            </td>
                          </tr>
                        }
                      </tbody>
                    </table>
                  }

                </div>
              </div>

            </div>
          }

        </div>
      </div>
    </div>
  </div>
</body>
</html>
